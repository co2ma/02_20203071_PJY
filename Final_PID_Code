#include <Servo.h>

/////////////////////////////
// Configurable parameters //
/////////////////////////////

// Arduino pin assignment
#define PIN_LED 9         // [1234] LED를 아두이노 GPIO 9번 핀에 연결
#define PIN_SERVO 10    // [3069] 서보모터를 아두이노 GPIO 10번 핀에 연결
#define PIN_IR A0     // [3070] 적외선 센서를 아두이노 아날로그 A0핀에 연결

// Framework setting
#define _DIST_TARGET 255    // [2635] 목표하는 위치
#define _DIST_MIN 100   //[3050] 거리의 최솟값이 100mm
#define _DIST_MAX 410                   //[3068] 거리의 최대값 410mm

// Distance sensor
#define _DIST_ALPHA 0.2   //[3054] 센서 보정정도
// [3131] EMA필터값
// Servo range
#define _DUTY_MIN 1400    // [3052] 서보의 최소각도를 microseconds로 표현
#define _DUTY_NEU 1550    // [3070] 레일플레이트 중립위치를 만드는 서보 duty값
#define _DUTY_MAX 1805    //[3062] 서보의 최대각도의 microseconds의 값

// Servo speed control
#define _SERVO_ANGLE 28   // [3131] 최대 가동범위에 따른 목표 서보 회전각
#define _SERVO_SPEED 120   //[3064]서보 속도를 30으로
#define _RAMPUP_TIME 300

// Event periods
#define _INTERVAL_DIST 20   // [2635] 적외선센서 업데이트 주기
#define _INTERVAL_SERVO 20  // [2635] 서보 업데이트 주기
#define _INTERVAL_SERIAL 100  // [3070] 시리얼 플로터 갱신 속도

// PID parameters
#define _KP 5.2  // [2635] P 이득 비율(?)
#define _KI 0.2   // [2635] I 이득 비율
#define _KD 290.0 // [2635] D 이득 비율
#define _ITERM_MAX 15


//////////////////////
// global variables //
//////////////////////

// Servo instance
Servo myservo; // [3070] 서보 객체 생성
bool tf= true;
// Distance sensor
float dist_target; // [1234] location to send the ball
float dist_raw, dist_ema; // [3070] 거리와 노이즈 필터 적용 후 거리를 저장하기 위한 변수
float prev_ema;
int stack;

// Event periods
unsigned long last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial; // [2635] 각 이벤트별 업데이트를 위해 측정하는 시간 //[3054] 마지막으로 측정한 거리, 마지막으로 측정한 서보 각도
bool event_dist, event_servo, event_serial; // [2635] 이벤트별 이번 루프에서 업데이트 여부

// Servo speed control
int duty_chg_max; // maximum speed, i.e., duty difference per interval (unit: us/interval)
int duty_chg_per_interval; // current speed (unit: us/interval)
int duty_chg_adjust; // duty accelration per interval during ramp up/down period (unit: us/interval^2)
int duty_target, duty_curr; // [3131] 목표duty, 현재duty

// PID variables
float error_curr, error_prev, control, pterm, dterm, iterm; // [3070] PID 제어를 위한 현재 오차, 이전오차, 컨트롤(?), p 값, d 값, i 값 변수 선언


void setup() {
    // initialize GPIO pins for LED and attach servo
    pinMode(PIN_LED, OUTPUT); //[3062] 핀 LED 활성화
    myservo.attach(PIN_SERVO); // [3070] 서보 구동을 위한 서보 초기화

    // initialize global variables
    duty_target, duty_curr = _DIST_MAX; // [3055] duty_target, duty_curr 초기화
    last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial = 0;
    // [3055] 샘플링 타임 변수 초기화
    dist_raw, dist_ema = _DIST_MIN; // [3055] dist 변수 초기화
    prev_ema = _DIST_MIN;
    stack = 0;
    pterm = iterm = dterm = 0; // [2635] pid 제어값에서 우선 p 만 사용하도록
    iterm = _ITERM_MAX;

    // move servo to neutral position
    myservo.writeMicroseconds(_DUTY_NEU);
    delay(1000);
    // initialize serial port
    Serial.begin(57600);

    // convert angle speed into duty change per interval.
    //duty_chg_max = (float)(_DUTY_MAX - _DUTY_MIN) * _SERVO_SPEED / 180 * _INTERVAL_SERVO / 1000;
    duty_chg_max = (_DUTY_MAX - _DUTY_MIN) / (float)(_SERVO_ANGLE) * (_SERVO_SPEED / 1000.0) * _INTERVAL_SERVO;
    duty_chg_adjust = (float) duty_chg_max * _INTERVAL_SERVO / _RAMPUP_TIME;
    duty_chg_per_interval = 0;

}


void loop() {
    // [3055] indentation 수정(space 4칸)
    /////////////////////
    // Event generator //
    /////////////////////
    unsigned long time_curr = millis(); // [3070] 이벤트 업데이트 주기 계산을 위한 현재 시간
    // [3070] 이벤트 주기가 돌아올때까지 현재시간과 비교하며 기다리도록 함.
    if (time_curr >= last_sampling_time_dist + _INTERVAL_DIST) {
        last_sampling_time_dist += _INTERVAL_DIST;
        event_dist = true;
    }
    if (time_curr >= last_sampling_time_servo + _INTERVAL_SERVO) {
        last_sampling_time_servo += _INTERVAL_SERVO;
        event_servo = true;
    }
    if (time_curr >= last_sampling_time_serial + _INTERVAL_SERIAL) {
        last_sampling_time_serial += _INTERVAL_SERIAL;
        event_serial = true;
    }

    ////////////////////
    // Event handlers //
    ////////////////////

    if (event_dist) {
        event_dist = false; // [2635] 업데이트 대기
        // get a distance reading from the distance sensor
        dist_raw = ir_distance_filtered(); // [2635] 센서 값 받아와서 변수에 저장
        dist_ema = _DIST_ALPHA * dist_raw + (1 - _DIST_ALPHA) * dist_ema;
        if(dist_ema > prev_ema - 8 && dist_ema < prev_ema + 8){
          if(stack > 300){
            dist_ema = prev_ema;
          }
          else{
            stack += 1;
            prev_ema = _DIST_ALPHA * dist_ema + (1 - _DIST_ALPHA) * prev_ema;
          }
        }
        else{
          stack = 0;
          prev_ema = dist_ema;
        }
        // [3055] dist_ema 설정

        // PID control logic
        error_curr = _DIST_TARGET - dist_ema; // [2635] 오차 계산 , 레L일 중심의 거리 - 탁구공 까지의 거리 탁구공이 중심에서 멀 수록 값이 작아짐
        pterm = _KP * error_curr; // [2635] p값은 오차
        dterm = _KD * (error_curr - error_prev);
        dterm = min(1000, dterm);
        dterm = max(-1000, dterm);
        iterm += _KI * error_curr;
        if (iterm > _ITERM_MAX) iterm = _ITERM_MAX;
        if (iterm < - _ITERM_MAX) iterm = - _ITERM_MAX;
        control = pterm + iterm + dterm; // [2635] control 값, i와 d는 현재 0
        //duty_target = _DUTY_NEU + control;
        duty_target = _DUTY_NEU + control * (control > 0 ? _DUTY_MAX - _DUTY_NEU : _DUTY_NEU - _DUTY_MIN) / 1000.0;

        // keep duty_target value within the range of [_DUTY_MIN, _DUTY_MAX]
        if (duty_target < _DUTY_MIN) // [2635] 양극값 넘어가는 경우 극값으로 제한
        {
            duty_target = _DUTY_MIN;
        }
        if (duty_target > _DUTY_MAX)
        {
            duty_target = _DUTY_MAX;
        }
        error_prev = error_curr;
    }

    if (event_servo) {
        event_servo = false; // [2635] 업데이트 대기
        // adjust duty_curr toward duty_target by duty_chg_per_interval
        if (duty_target > duty_curr) {
            if(tf == true){
              tf = false;
              duty_chg_per_interval = 0;
            }
            if (duty_chg_per_interval < duty_chg_max) {
                duty_chg_per_interval += duty_chg_adjust;
                if (duty_chg_per_interval > duty_chg_max) duty_chg_per_interval = duty_chg_max;
            }
            duty_curr += duty_chg_per_interval;
            if (duty_curr > duty_target) duty_curr = duty_target;
        }
        else if (duty_target < duty_curr) {
            if(tf == false){
              tf = true;
              duty_chg_per_interval = 0;
            }
            if (duty_chg_per_interval > -duty_chg_max) {
                duty_chg_per_interval -= duty_chg_adjust;
                if (duty_chg_per_interval < -duty_chg_max) duty_chg_per_interval = -duty_chg_max;
            }
            duty_curr += duty_chg_per_interval;
            if (duty_curr < duty_target) duty_curr = duty_target;
        }
        else {
            duty_chg_per_interval = 0;
        }
        // update servo position
        myservo.writeMicroseconds((int)duty_curr);
        event_servo = false; // [3055] 모든 작업이 끝나면 이벤트를 다시 false로
    }

    if (event_serial) {
        event_serial = false; // [3070] 이벤트 주기가 왔다면 다시 false로 만들고 이벤트를 수행
        Serial.print("IR:");
        Serial.print(dist_ema);
        Serial.print(",T:");
        Serial.print(dist_target);
        Serial.print(",P:");
        Serial.print(map(pterm, -1000, 1000, 510, 610));
        Serial.print(",D:");
        Serial.print(map(dterm, -1000, 1000, 510, 610));
        Serial.print(",I:");
        Serial.print(map(iterm, -1000, 1000, 510, 610));
        Serial.print(",DTT:");
        Serial.print(map(duty_target, 1000, 2000, 410, 510));
        Serial.print(",DTC:");
        Serial.print(map(duty_curr, 1000, 2000, 410, 510));
        Serial.println(",-G:245,+G:265,m:255,M:800");
    }
}

float ir_distance(void) { // return value unit: mm
    float val; // [3055] 변수 val 선언
    float volt = float(analogRead(PIN_IR)); // [3055] volt변수에 적외선 센서 측정값 입력
    val = ((6762.0 / (volt - 9.0)) - 4.0) * 10.0; // [3055] volt 값 보정
    return val; // [3055] val 리턴
}

float ir_distance_filtered(void) { // return value unit: mm
    const float coE[] = { -0.0000010, 0.0016368, 0.6127815, 56.2095824};
    float x = ir_distance();
    float dist_cali = coE[0] * pow(x, 3) + coE[1] * pow(x, 2) + coE[2] * x + coE[3];
    return dist_cali; // for now, just use ir_distance() without noise filter.
}
